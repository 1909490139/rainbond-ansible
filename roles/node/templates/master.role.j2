version: '2.1'
services:
- name: rbd-hub
  endpoints:
  - name: HUB_ENDPOINTS
    protocol:
    port: 5000
  health:
    name: rbd-hub
    model: http
    address: 127.0.0.1:5000
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm rbd-hub
  start: >-
    docker run --name rbd-hub
    --network host
    -v /grdata/services/registry/:/var/lib/registry
    -i goodrain.me/{{ hub }}
  stop: docker stop rbd-hub
  restart_policy: always
  restart_sec: 10
- name: rbd-repo
  endpoints:
  - name: REPO_ENDPOINTS
    protocol:
    port: 8081
  health:
    name: rbd-repo
    model: http
    address: 127.0.0.1:8081/artifactory/libs-release
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm rbd-repo
  start: >-
    docker run --name rbd-repo
    --network host
    -v /grdata/services/artifactory-manage01:/var/opt/jfrog/artifactory
    -i goodrain.me/{{ repo }}
  stop: docker stop rbd-repo
  restart_policy: always
- name: rbd-api
  endpoints:
  - name: API_ENDPOINTS
    protocol: http
    port: 8888
  health:
    name: rbd-api
    model: http
    address: {{ nodeip }}:8888/v2/health
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm rbd-api
  start: >-
    docker run --name rbd-api
    --network host
    -e LicenseSwitch="off"
    -e EX_DOMAIN={{ app_domain }}
    -v /grdata:/grdata
    -v /grdata/downloads/log:/grdata/logs
    -v {{ rbd_dir }}/etc/rbd-api:/etc/goodrain
    -v {{ kubecfg_dir }}:/opt/rainbond/etc/kubernetes/kubecfg
    -v {{ rbd_dir }}/logs/docker_logs:/data/docker_logs
    -v {{ rbd_dir }}/logs/rbd-api:/logs
    -i rainbond/{{ api }}
    --etcd=${ETCD_ENDPOINTS}
    --api-addr-ssl={{ nodeip }}:8443
    --api-addr={{ nodeip }}:8888
    --log-level=debug
    --mysql="{{ db_user }}:{{ db_pass }}@tcp({{ MASTER_IP }}:3306)/region"
    --api-ssl-enable=true
    --api-ssl-certfile=/etc/goodrain/region.goodrain.me/ssl/server.pem
    --api-ssl-keyfile=/etc/goodrain/region.goodrain.me/ssl/server.key.pem
    --client-ca-file=/etc/goodrain/region.goodrain.me/ssl/ca.pem
  stop: docker stop rbd-api
  restart_policy: always
  restart_sec: 10
- name: rbd-chaos
  endpoints:
  - name: CHAOS_ENDPOINTS
    protocol: http
    port: 3228
  health:
    name: rbd-chaos
    model: http
    address: 127.0.0.1:3228/v2/builder/health
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm rbd-chaos
  start: >-
    docker run --name rbd-chaos
    --network host
    -e SOURCE_DIR="/cache/source"
    -e CACHE_DIR="/cache"
    -v /logs:/logs
    -v /grdata:/grdata
    -v /cache:/cache
    -v /var/run:/var/run
    -v /grdata/services/ssh:/root/.ssh
    -i rainbond/{{ chaos }}
    --etcd-endpoints=${ETCD_ENDPOINTS} --log-level=debug --mysql="{{ db_user }}:{{ db_pass }}@tcp({{ MASTER_IP }}:3306)/region"
  stop: docker stop rbd-chaos
  restart_policy: always
  restart_sec: 10
- name: rbd-mq
  endpoints:
  - name: MQ_ENDPOINTS
    protocol: http
    port: 6301
  health:
    name: rbd-mq
    model: http
    address: 127.0.0.1:6301/health
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm rbd-mq
  start: >-
    docker run --name rbd-mq
    --network host
    -i rainbond/{{ mq }}
    --log-level=debug --etcd-endpoints=${ETCD_ENDPOINTS}
  stop: docker stop rbd-mq
  restart_policy: always
  restart_sec: 10
- name: rbd-webcli
  endpoints:
  - name: WEBCLI_ENDPOINTS
    protocol: http
    port: 7171
  health:
    name: rbd-webcli
    model: http
    address: 127.0.0.1:7171/health
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm rbd-webcli
  start: >-
    docker run --name rbd-webcli
    --network host
    -v /usr/local/bin/kubectl:/usr/bin/kubectl
    -v /root/.kube:/root/.kube
    -i goodrain.me/{{ webcli }}
    --hostIP={{ nodeip }} --etcd-endpoints=${ETCD_ENDPOINTS}
  stop: docker stop rbd-webcli
  restart_policy: always
  restart_sec: 10
- name: rbd-worker
  endpoints:
  - name: WORKER_ENDPOINTS
    protocol: http
    port: 6369
  health:
    name: rbd-worker
    model: http
    address: 127.0.0.1:6369/worker/health
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm rbd-worker
  start: >-
    docker run --name rbd-worker
    --network host
    -e K8S_MASTER=http://127.0.0.1:8181
    -e EX_DOMAIN={{ app_domain }}
    -v {{ kubecfg_dir }}:/etc/goodrain/kubernetes
    -v /grdata:/grdata
    -i rainbond/{{ worker }}
    --log-level=info
    --etcd-endpoints=${ETCD_ENDPOINTS}
    --node-name={{ inventory_hostname }}
    --kube-config="/etc/goodrain/kubernetes/admin.kubeconfig"
    --log-level=debug
    --mysql="{{ db_user }}:{{ db_pass }}@tcp({{ MASTER_IP }}:3306)/region"
  stop: docker stop rbd-worker
  restart_policy: always
  restart_sec: 10
- name: rbd-monitor
  endpoints:
  - name: MONITOR_ENDPOINTS
    protocol: http
    port: 3329
  - name: PROMETHEUS_ENDPOINTS
    protocol: http
    port: 9999
  health:
    name: rbd-monitor
    model: http
    address: 127.0.0.1:3329/monitor/health
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm rbd-monitor
  start: >-
    docker run --name rbd-monitor
    --network host
    -v /opt/rainbond/data/prom:/prometheusdata
    -i goodrain.me/{{ monitor }}
    --etcd-endpoints=${ETCD_ENDPOINTS} --advertise-addr={{ nodeip }}:9999  --web.listen-address=0.0.0.0:9999 --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheusdata --storage.tsdb.no-lockfile --storage.tsdb.retention=7d --log.level=info
  stop: docker stop rbd-monitor
  restart_policy: always
  restart_sec: 10
- name: rbd-eventlog
  endpoints:
  - name: EVENTLOG_ENDPOINTS
    protocol: http
    port: 6363
  health:
    name: rbd-eventlog
    model: http
    address: {{ nodeip }}:6363/health
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm rbd-eventlog
  start: >-
    docker run --name rbd-eventlog
    --network host
    -e K8S_MASTER=http://127.0.0.1:8181
    -v {{ rbd_dir }}/logs/rbd-eventlog:/var/log
    -v /grdata/downloads/log:/grdata/logs
    -i rainbond/{{ eventlog }}
    --cluster.bind.ip={{ nodeip }} --db.type=mysql --db.url="{{ db_user }}:{{ db_pass }}@tcp({{ MASTER_IP }}:3306)/region" --discover.etcd.addr=${ETCD_ENDPOINTS} --eventlog.bind.ip={{ nodeip }} --websocket.bind.ip={{ nodeip }}
  stop: docker stop rbd-eventlog
  restart_policy: always
  restart_sec: 10
- name: rbd-app-ui
  endpoints:
  - name: APP_UI_ENDPOINTS
    protocol: http
    port: 7070
  health:
    name: rbd-app-ui
    model: http
    address: 127.0.0.1:7070
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm rbd-app-ui
  start: >-
    docker run --name rbd-app-ui
    --network host
    -e MANAGE_SECRET_KEY={{ secretkey }}
    -e MYSQL_HOST={{ MASTER_IP }}
    -e MYSQL_PORT=3306
    -e MYSQL_USER={{ db_user }}
    -e MYSQL_PASS={{ db_pass }}
    -e MYSQL_DB=console
    -v /grdata/services/console:/data
    -v {{ rbd_dir }}/etc/rbd-api:/etc/goodrain
    -v {{ rbd_dir }}/logs/rbd-app-ui/:/tmp/
    -i goodrain.me/{{ rbd_app_ui }}
  stop: docker stop rbd-app-ui
  restart_policy: always
  restart_sec: 10

- name: docker
  endpoints:
  - name: DOCKER_ENDPOINTS
    protocol: http
    port: 2376
  health:
    name: docker
    model: http
    address: 127.0.0.1:2376/version
    time_interval: 5
  after:
    - network.target
  requires:
    - network.target
  type: notify
  start: none
  restart_policy: always
  restart_sec: 10
- name: storage
  health:
    name: storage
    model: cmd
    address: {{ rbd_dir }}/health/storage.sh
    time_interval: 5
  after:
    - network.target
  requires:
    - network.target
  type: notify
  start: none
  restart_policy: always
  restart_sec: 10
- name: local-dns
  health:
    name: local-dns
    model: cmd
    address: {{ rbd_dir }}/health/local-dns.sh
    time_interval: 5
  after:
    - network.target
  requires:
    - network.target
  type: notify
  start: none
  restart_policy: always
  restart_sec: 10
- name: rbd-dns
  endpoints:
  - name: DNS_ENDPOINTS
    protocol: udp
    port: 53
  health:
    name: rbd-dns
    model: cmd
    address: {{ rbd_dir }}/health/rbd-dns.sh
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm rbd-dns
  start: >-
    docker run --name rbd-dns
    --network host
    -e VERBOSE=true
    -v {{ kubecfg_dir }}:/opt/rainbond/etc/kubernetes/kubecfg
    -i goodrain.me/{{ dns }}
    --kubecfg-file={{ kubecfg_dir }}/admin.kubeconfig
    --v=2
    --healthz-port=8089
    --dns-bind-address={{ nodeip }}
    --nameservers=100.100.2.136,1.2.4.8
    --recoders=goodrain.me={{ MASTER_IP }},*.goodrain.me={{ MASTER_IP }}
  stop: docker stop rbd-dns
  restart_policy: always
  restart_sec: 10