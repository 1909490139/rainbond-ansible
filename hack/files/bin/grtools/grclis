#!/usr/bin/env bash

# Copyright 2019 The Goodrain Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version=5.1.0
rainbond=(rbd-worker rbd-chaos rbd-api rbd-app-ui rbd-webcli rbd-mq rbd-monitor rbd-gateway rbd-eventlog rbd-dns)
all=(node rbd-chaos rbd-worker rbd-api rbd-eventlog rbd-db rbd-repo calico kube-controller-manager kube-scheduler rbd-app-ui rbd-monitor rbd-webcli rbd-mq rbd-gateway kube-apiserver rbd-dns rbd-hub etcd)

upgrade(){
    if [ "$1" == "all" ];then
        echo "will upgrade all image"
        for img in ${rainbond[@]}; do
            docker pull rainbond/${img}:${version}
            docker tag rainbond/${img}:${version} goodrain.me/${img}:${version}
            docker push goodrain.me/${img}:${version}
            systemctl restart ${img}
            [ "$?" -eq 0 ] && echo "restart ${img} ok."
        done
    elif [ "$1" == "node" ]; then
            docker pull rainbond/cni:rbd_${version}
            docker run --rm -v /opt/rainbond/etc/tools:/sysdir rainbond/cni:rbd_${version} tar zxf /pkg.tgz -C /sysdir
            systemctl stop node
            cp -a /opt/rainbond/etc/tools/bin/node /usr/local/bin/node
            systemctl start node
            [ "$?" -eq 0 ] && echo "restart node ok."
    else
        echo "will upgrade $1 image"
        for img in ${rainbond[@]}; do
            if [ "$1" == "$img" ]; then
                docker pull rainbond/${img}:${version}
                docker tag rainbond/${img}:${version} goodrain.me/${img}:${version}
                docker push goodrain.me/${img}:${version}
                systemctl restart ${img}
                [ "$?" -eq 0 ] && echo "restart ${img} ok."
            fi
        done
    fi
}

stop(){
    [ ! -z "$1" ] && (
        systemctl stop $1
    ) || (
        for s in ${all[@]}
        do          
            echo "will stop $s"
            systemctl stop $s
        done
    )
}

start(){
    systemctl start etcd
    systemctl start node
}

reset(){
    systemctl stop node
    systemctl stop kubelet
    dps | grep goodrain.me | grep -v 'k8s' | awk '{print $NF}' | xargs -I {} systemctl stop {}
    cclear
    rm -rf /opt/rainbond/
    rm -rf /tmp/*
    rm -rf /usr/local/bin/grctl
    rm -rf /usr/local/bin/node
}

help(){
    echo "grclis start/stop <服务名>"
    echo "grclis upgrade <服务名/all>"
    echo "grclis reset"
}

case $1 in
    upgrade)
        upgrade $2 
    ;;
    start)
        start
    stop)
        stop $2
    ;;
    reset)
        read -n1 -p "Are you sure you want to continue resetting node [Y/N]?" answer
        case $answer in
        Y | y)
            reset;;
        *)
            echo "";;
        esac
    ;;
    *)
        help        
    ;;
esac